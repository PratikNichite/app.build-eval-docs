Prompt 1: Generate a Streamlit app called Pet Vaccination Tracker that uses SQLite (or TinyDB) to store records of pet vaccinations. Provide a form to add entries with pet name, vaccine type, vaccination date, and next due date; show all records in a table with Edit and Delete options; highlight any upcoming due vaccinations within the next 30 days; and ensure all operations persist to the database and refresh the display instantly.

Prompt 2: Generate a Streamlit app called Movie Watchlist Manager that connects to a local SQLite database to track movies you want to watch. The app should present a form to add new entries with fields for title, director, release year, and watch status ( “Planned”, “Watching”, “Completed”), display the existing list in a table with inline Edit and Delete buttons for each row, and immediately reflect any changes by writing back to the database and reloading the table.

Prompt 3: Generate FastAPI Inventory Service that exposes REST endpoints for products (create, read, update, delete) and automatically generates Swagger UI documentation. The agent would set up Pydantic models, mount CRUD routes under /products, and configure an in‑memory or file‑based store so you can test POST, GET, PUT, and DELETE requests easily through both code and the interactive API docs.

Prompt 4: Build a Classic Snake Game with pygame and scaffold a Python app that opens a grid‑based window, draws the snake as a series of square blocks, and lets the player steer it with the arrow keys. it should have randomized “food” that, when eaten, grows the snake’s length and increments the score shown in the corner, and should include logic to detect collisions with walls or the snake’s own body to trigger a game‑over screen with a “Press R to restart” option.

Prompt 5: Generate Breaker Clone using PySimpleGUI for graphics: have the agent generate a window with a movable paddle at the bottom controlled by left/right arrow keys or mouse drag, a grid of colored bricks at the top, and a ball that bounces off walls, paddle, and bricks. The prompt should cover ball physics, brick‑removal on collision, level completion detection, and a simple lives counter so you can lose on a missed bounce and reset the level.

Prompt 6: Generate a Memory Card Matching Game in PySimpleGUI: guide the agent to create a window that lays out a face‑down grid of cards (4×4), flips two cards on click to reveal their icons, and either removes matching pairs or flips them back over after a brief pause. The prompt should include shuffling the card deck, tracking attempts, and displaying a “You Win!” dialog when all pairs are found.

Prompt 7: Generate an app that asks the user for their latitude and longitude once, then on a timer (default every 5 minutes) fetches the International Space Station position from the Open Notify API, calculates the great‑circle distance, and if it’s under 500 km shows a notification ‘ISS overhead!’ with the current altitude and speed

Prompt 8: Create Crypto Portfolio Manager with the CoinGecko API: on startup it loads your tracked coins from portfolio.json and displays them in a table along with current price and 24 h change. You have “Add Coin” (enter coin ID, quantity), “Update Quantity,” and “Remove Coin” buttons that perform in-memory CRUD on the JSON file, refreshing the table each time—while every table refresh also fetches live prices via CoinGecko.

Prompt 9: Create a Movie Watchlist CRUD Flask app that leverages the TMDB API: the homepage lists all movies you’ve saved (title, poster thumbnail, status), there’s a search form calling TMDB to find new titles by keyword, and each result has an “Add” button that inserts it into your local SQLite watchlist. From the list view you can click “Edit” to update your status (Planned, Watching, Completed) or “Delete” to remove it—each action writes to the database and redirects you back to the updated list.

Prompt 10: “Write a Flask app called Joke Collector that integrates with the Official Joke API and a local SQLite database: on the homepage, display a list of all saved jokes (setup, punchline, optional user comment) with “Edit” and “Delete” links; include a “Fetch Random Joke” button that issues a GET to https://official-joke-api.appspot.com/random_joke, inserts the returned setup and punchline into your SQLite table, flashes a success message, and redirects back to the list; clicking “Edit” loads the joke into a form where you can add or modify your personal comment and save it back to the database; clicking “Delete” removes the joke after flashing a confirmation; ensure each CRUD operation commits instantly and uses Flask’s flash messaging for user feedback.



prompt_id|build_status|config|
1|success|0011|
2|success|0011|
3|fail|0011|
4|fail|0011|
5|fail|0011|
6|success|0011|
7|fail|0011|
8|success|0011|
9|success|0011|
10|fail|0011|
