<<<<<<< HEAD
prompt_id|written_by|user_prompt
1|Pratik|Create a simple web app called Plant Care Tracker that lets users track the condition of their plants using fun plant moods based on custom rule-based logic. Avoid using AI, ML, or external APIs.
2|Pratik|Create a Book Swap app where users can list books they want to swap, browse the available books, and request swaps with other members. Make reasonable assumptions about functionalities and appearance of the app and keep the app simple.
3|Pratik|Make a Roommate Chore Wheel that randomly assigns chores each week and tracks completion.
4|Pratik|Develop a Medical Clinic Inventory Manager web application. This app should feature a dashboard where clinic staff can upload CSV files containing medicine names, quantities, and expiry dates. The dashboard should then display the current inventory, allow for searching and filtering of medicines, and highlight items nearing their expiry date.
5|Pratik|Create a web app where users enter monthly income and expenses by category, and the app displays a pie chart of their spending.
6|Pratik|Create a web app where students post project ideas and recruit classmates to join based on skills.
7|Pratik|Create a web app that lets users upload a CSV file with student names and their field of interest (Machine Learning, SDE, Data Science, etc.). The app should randomly assign students into teams of 2 people grouped by field. Make assumptions and do not ask more questions.
8|Pratik|Build a dashboard to monitor car maintenance history and upcoming service dates.
9|Pratik|Make a simple marketplace for students to buy and sell used furniture.
10|Pratik|Create a web app where users can add, view, and manage saved passwords with a strength indicator that shows if each password is weak, medium, or strong based on length, complexity, and character variety.
11|Pratik|Build a simple web app that suggests if tomorrow's trip to a given city is a good idea, based on open-meteo API's weather forecast for that city.
12|Pratik|Build a currency conversion app that takes an amount, source currency and target currency as input and converts it using the Frankfurter API.
13|Dheenadayalan|Generate a Streamlit app called Pet Vaccination Tracker that uses SQLite (or TinyDB) to store records of pet vaccinations. Provide a form to add entries with pet name, vaccine type, vaccination date, and next due date; show all records in a table with Edit and Delete options; highlight any upcoming due vaccinations within the next 30 days; and ensure all operations persist to the database and refresh the display instantly.
14|Dheenadayalan|Generate a Streamlit app called Movie Watchlist Manager that connects to a local SQLite database to track movies you want to watch. The app should present a form to add new entries with fields for title, director, release year, and watch status ( “Planned”, “Watching”, “Completed”), display the existing list in a table with inline Edit and Delete buttons for each row, and immediately reflect any changes by writing back to the database and reloading the table.
15|Dheenadayalan|Generate FastAPI Inventory Service that exposes REST endpoints for products (create, read, update, delete) and automatically generates Swagger UI documentation. The agent would set up Pydantic models, mount CRUD routes under /products, and configure an in‑memory or file‑based store so you can test POST, GET, PUT, and DELETE requests easily through both code and the interactive API docs.
16|Dheenadayalan|Imagine a Classic Snake Game built with Pygame: ask the agent to scaffold a Python app that opens a grid‑based window, draws the snake as a series of square blocks, and lets the player steer it with the arrow keys. The prompt should specify randomized “food” that, when eaten, grows the snake’s length and increments the score shown in the corner, and should include logic to detect collisions with walls or the snake’s own body to trigger a game‑over screen with a “Press R to restart” option.
17|Dheenadayalan|Generate Breaker Clone using PySimpleGUI for graphics: have the agent generate a window with a movable paddle at the bottom controlled by left/right arrow keys or mouse drag, a grid of colored bricks at the top, and a ball that bounces off walls, paddle, and bricks. The prompt should cover ball physics, brick‑removal on collision, level completion detection, and a simple lives counter so you can lose on a missed bounce and reset the level.
18|Dheenadayalan|Generate a Memory Card Matching Game in PySimpleGUI: guide the agent to create a window that lays out a face‑down grid of cards (4×4), flips two cards on click to reveal their icons, and either removes matching pairs or flips them back over after a brief pause. The prompt should include shuffling the card deck, tracking attempts, and displaying a “You Win!” dialog when all pairs are found.
19|Dheenadayalan|Generate an app that asks the user for their latitude and longitude once, then on a timer (default every 5 minutes) fetches the International Space Station position from the Open Notify API, calculates the great‑circle distance, and if it’s under 500 km shows a notification ‘ISS overhead!’ with the current altitude and speed.
20|Dheenadayalan|Create Crypto Portfolio Manager with the CoinGecko API: on startup it loads your tracked coins from portfolio.json and displays them in a table along with current price and 24 h change. You have “Add Coin” (enter coin ID, quantity), “Update Quantity,” and “Remove Coin” buttons that perform in-memory CRUD on the JSON file, refreshing the table each time—while every table refresh also fetches live prices via CoinGecko.
21|Dheenadayalan|Create a Movie Watchlist CRUD Flask app that leverages the TMDB API: the homepage lists all movies you’ve saved (title, poster thumbnail, status), there’s a search form calling TMDB to find new titles by keyword, and each result has an “Add” button that inserts it into your local SQLite watchlist. From the list view you can click “Edit” to update your status (Planned, Watching, Completed) or “Delete” to remove it—each action writes to the database and redirects you back to the updated list.
22|Dheenadayalan|Write a Flask app called Joke Collector that integrates with the Official Joke API and a local SQLite database: on the homepage, display a list of all saved jokes (setup, punchline, optional user comment) with “Edit” and “Delete” links; include a “Fetch Random Joke” button that issues a GET to https://official-joke-api.appspot.com/random_joke, inserts the returned setup and punchline into your SQLite table, flashes a success message, and redirects back to the list; clicking “Edit” loads the joke into a form where you can add or modify your personal comment and save it back to the database; clicking “Delete” removes the joke after flashing a confirmation; ensure each CRUD operation commits instantly and uses Flask’s flash messaging for user feedback.
23|Pranav|Create a web app for managing a book library where users can add, view, update, and remove books, each with details like title, author, genre, and reading status. Include user-friendly forms, list views, and the ability to search or filter books.
24|Pranav|Develop a Team Task Manager:A collaborative app for teams to create, assign, and track tasks, with notifications and progress dashboards.
25|Pranav|Design a system for small businesses to manage product inventory, suppliers, and sales transactions. Include real-time stock updates, low-stock alerts, and sales analytics dashboards.
26|Pranav|Build a dashboard where users log sleep, work hours, social time, screen time, and emotional energy. Visualize patterns and suggest when to take breaks.
27|Pranav|Users input hours of sleep, stress levels, caffeine/alcohol intake—then get a daily "wellness score" with historical trends.
28|Pranav|Develop a scheduling app for individuals and service providers to book appointments, manage calendar availability, and send automated reminders. The app should support various appointment types such as consultations or meetings, and optionally integrate with external calendars. Include a user-friendly interface for both clients and providers.
29|Pranav|Develop a responsive web application that predicts the price of a refurbished(used) car based on user-provided input features. The app should accept at least 10 input features, including both numerical and categorical values, with appropriate input components (such as dropdowns, sliders, and text inputs). The app should also feature car image carousels on the main page, and allow users to save, edit, and delete their input data records via the UI.